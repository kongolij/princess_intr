openapi: 3.0.3
info:
  title: Auth API
  version: 1.0.0
  description: Handles login and logout endpoints for users

servers:
  - url: https://devapic.princesauto.com/ecom/v1
    description: Dev environment
  - url: https://testapic.princesauto.com/ecom/v1
    description: Test environment
  - url: https://apic.princesauto.com/ecom/v1
    description: Production environment

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: User Login
      description: Authenticates user credentials and returns a JWT token
      parameters:
        - $ref: '#/components/parameters/OcpApimSubscriptionKey'
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/CartId'
        - $ref: '#/components/parameters/MyStoreId'
        - $ref: '#/components/parameters/MyPostalCode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: mySecurePassword123
                rememberMe:
                  type: boolean
                  description: Indicates if the user should be automatically logged in on future visits (persistent session).
                  example: true    
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponse'
        '401':
          description: Invalid credentials 
        '400':
          description: Validation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Required parameter firstName  is missing:
                  value:
                    error_code: user_99999
                    message: Missing required fields or invalid format
                    type: general
        '403':
          description: Insufficient priviledges.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Token has insufficent privileges:
                  value:
                    error_code: Forbidden
                    message: You do not have permission to access this resource.
                    type: AuthorizationError  
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Critical dependent service is down:
                  value:
                    error_code: user_99999
                    message: Service unavailable please try after some time
                    type: General  

  /auth/logout:
    post:
      tags:
        - Auth
      summary: User Logout
      description: Logs out the current user by invalidating the session/token
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/OcpApimSubscriptionKey'
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/CartId'
        - $ref: '#/components/parameters/MyStoreId'
        - $ref: '#/components/parameters/MyPostalCode'
      responses:
        '204':
          description: Successfully logged out
        '401':
          description: Unauthorized – invalid or missing token
        '403':
          description: Forbidden – token valid but user not permitted to logout (rare)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ForbiddenLogout:
                  value:
                    error_code: Forbidden
                    message: You do not have permission to logout
                    type: AuthorizationError
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                LogoutFailure:
                  value:
                    error_code: logout_500
                    message: Unable to complete logout due to system error
                    type: General  
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh Access Token
      description: >
        Issues a new access token if a valid refresh token is present in an HTTP-only secure cookie.

        The refresh token must be sent as a cookie named `refreshToken`.
        This is handled automatically by browsers when requests are made with `credentials: 'include'`.

        If the refresh token is valid and unexpired, a new access token is returned in the response body.
        The refresh token may also be rotated and reissued via a secure `Set-Cookie` header.
      parameters:
        # Standard shared headers
        - $ref: '#/components/parameters/OcpApimSubscriptionKey'
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/CartId'
        - $ref: '#/components/parameters/MyStoreId'
        - $ref: '#/components/parameters/MyPostalCode'

        # Optional: Document the refresh token cookie (for visibility in Swagger UI/testing tools)
        - in: cookie
          name: refreshToken
          required: true
          schema:
            type: string
          description: >
            Refresh token stored as a secure, HTTP-only cookie.
            Typically set during initial login and automatically sent with requests by the browser.

      responses:
        '200':
          description: >
            New access token issued successfully.

            If refresh token rotation is enabled, a new refresh token will be set via a `Set-Cookie` header.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponse'

        '401':
          description: Unauthorized – refresh token is invalid, expired, or missing

        '403':
          description: >
            Forbidden – the refresh token is valid but the user is not allowed to refresh the session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                RefreshForbidden:
                  value:
                    error_code: Forbidden
                    message: You do not have permission to refresh your session
                    type: AuthorizationError

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                RefreshFailure:
                  value:
                    error_code: refresh_500
                    message: Unable to process token refresh at this time
                    type: General
  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    JWTResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT token used for authorization
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
            eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.
            SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        token_type:
          type: string
          example: Bearer
          description: Token type to be used in the Authorization header
        expires_in:
          type: integer
          example: 3600
          description: Duration in seconds for which the token is valid
   
    ErrorResponse:
      type: object
      properties:
        error_code:
          type: string
          description: A unique identifier for the error type.
        message:
          type: string
          description: A human-readable explanation of the error.
        type:
          type: string
          description: The category or nature of the error.
  parameters:
    OcpApimSubscriptionKey:
      in: header
      name: Ocp-Apim-Subscription-Key
      required: true
      schema:
        type: string
      description: Azure API Management subscription key

    Language:
      in: header
      name: Language
      required: false
      schema:
        type: string
        example: en
      description: Preferred language (e.g., en, fr)

    CartId:
      in: header
      name: CartId
      required: false
      schema:
        type: string
      description: Guest cart ID for cart merge

    MyStoreId:
      in: header
      name: MyStoreId
      required: false
      schema:
        type: string
      description: Store identifier (e.g., location code)

    MyPostalCode:
      in: header
      name: MyPostalCode
      required: false
      schema:
        type: string
      description: Customer postal code for personalization
      
      
