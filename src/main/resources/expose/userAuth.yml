openapi: 3.0.3
info:
   title: Auth API
   version: 1.0.0
   description: Handles login and logout endpoints for users

servers:
-  url: https://devapic.princesauto.com/ecom/v1
   description: Dev environment
-  url: https://testapic.princesauto.com/ecom/v1
   description: Test environment
-  url: https://apic.princesauto.com/ecom/v1
   description: Production environment

tags:
-  name: Auth
   description: Endpoints for user login and logout  
paths:
   /auth/login:
      post:
         tags:
         - Auth
         summary: User Login
         description: Authenticates user credentials and returns a JWT token
         parameters:
         -  $ref: '#/components/parameters/OcpApimSubscriptionKey'
         -  $ref: '#/components/parameters/Language'
         -  $ref: '#/components/parameters/CartId'
         -  $ref: '#/components/parameters/MyStoreId'
         requestBody:
            required: true
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/LoginInput'
         responses:
            '200':
               description: Successfully authenticated
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/JWTResponse'
            '401':
               description: Invalid credentials
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'
                     examples:
                        AuthenticationError:   
                          $ref: '#/components/examples/AuthenticationErrorExample'                          
            '400':
               description: Validation failed.
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'
                     examples:
                        UserFormValidationFailedGeneral:
                           $ref: '#/components/examples/UserFormValidationFailedGeneralExample'
                        EmailMissingFailed:
                           $ref: '#/components/examples/EmailMissingExample'
                        EmailValidationFailed:
                           $ref: '#/components/examples/EmailValidationFailedExample'
                        PasswordMissingFailed:
                           $ref: '#/components/examples/PasswordMissingExample'
                        PasswordValidationFailed:
                           $ref: '#/components/examples/PasswordValidationFailedExample'
            '403':
               description: Insufficient priviledges.
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'
                     examples:
                         AuthorizationError:
                           $ref: '#/components/examples/AuthorizationErrorExample'
                       
            '500':
               description: Internal Server Error
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'
                     examples:
                        InternalServerError:
                           $ref: '#/components/examples/InternalServerErrorExample'
   /auth/logout:
      post:
         tags:
         - Auth
         summary: User Logout
         description: Logs out the current user by invalidating the session/token
         security:
         -  bearerAuth: []
         parameters:
         -  $ref: '#/components/parameters/OcpApimSubscriptionKey'
         -  $ref: '#/components/parameters/Language'
         -  $ref: '#/components/parameters/CartId'
         -  $ref: '#/components/parameters/MyStoreId'
         responses:
            '204':
               description: Successfully logged out
            '401':
               description: Unauthorized – invalid or missing token
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'
                     examples:
                        Unauthorized:
                           $ref: '#/components/examples/UnauthorizedErrorExample'
            '403':
               description: Forbidden – token valid but user not permitted to logout (rare)
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'
                     examples:
                         AuthorizationError:
                           $ref: '#/components/examples/AuthorizationErrorExample'
            '500':
               description: Internal Server Error
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'
                     examples:
                        InternalServerError:
                           $ref: '#/components/examples/InternalServerErrorExample'
   /auth/refresh:
      post:
         tags:
         - Auth
         summary: Refresh Access Token
         description: |

            Issues a new access token if a valid refresh token is present in an HTTP-only secure cookie.
            The refresh token must be sent as a cookie named `refreshToken`. This is handled automatically by browsers when requests are made with `credentials: 'include'`.

            If the refresh token is valid and unexpired, a new access token is returned in the response body. The refresh token may also be rotated and reissued via a secure `Set-Cookie` header.
         parameters:
         -  $ref: '#/components/parameters/OcpApimSubscriptionKey'
         -  $ref: '#/components/parameters/Language'
         -  $ref: '#/components/parameters/CartId'
         -  $ref: '#/components/parameters/MyStoreId'
         
         -  in: cookie
            name: refreshToken
            required: true
            schema:
               type: string
            description: |
               Refresh token stored as a secure, HTTP-only cookie. Typically set during initial login and automatically sent with requests by the browser.
         responses:
            '200':
               description: |
                  New access token issued successfully.
                  If refresh token rotation is enabled, a new refresh token will be set via a `Set-Cookie` header.
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/JWTResponse'
            '401':
               description: Unauthorized – refresh token is invalid, expired, or missing
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'
                     examples:
                         InvalidToken:
                           $ref: '#/components/examples/InvalidTokenExample'

            '403':
               description: Forbidden – the refresh token is valid but the user is not allowed to refresh the session
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'
                     examples:
                         AuthorizationError:
                           $ref: '#/components/examples/AuthorizationErrorExample'
            '500':
               description: Internal Server Error
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/ErrorResponse'
                     examples:
                        InternalServerError:
                           $ref: '#/components/examples/InternalServerErrorExample'
              
components:
   securitySchemes:
      bearerAuth:
         type: http
         scheme: bearer
         bearerFormat: JWT
   schemas:
      JWTResponse:
         type: object
         properties:
             access_token:
               type: string
               description: JWT token used for authorization
               example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             refresh_token:
               type: string
               description: Long-lived token used to obtain a new access token without re-authenticating.
               example: edastbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...  
             token_type:
               type: string
               example: Bearer
               description: Token type to be used in the Authorization header
             expires_in:
               type: integer
               example: 3600
               description: Duration in seconds for which the token is valid
               
      LoginInput:
         type: object
         required:
            - email
            - password
         properties:
           email:
              type: string
              format: email
           password:
              type: string
              format: password
           rememberMe:
              type: boolean
              description: Persistent session          
      
      ErrorResponse:
         type: object
         properties:
            error_code:

               type: string
               description: A unique identifier for the error type.
            message:
               type: string
               description: A human-readable explanation of the error.
            type:
               type: string
               description: The category or nature of the error.
   parameters:
      OcpApimSubscriptionKey:
         in: header
         name: Ocp-Apim-Subscription-Key
         required: true
         schema:
            type: string
         description: Azure API Management subscription key
      Language:
         in: header
         name: Language
         required: false

         schema:
            type: string
            example: en
         description: Preferred language (e.g., en, fr)
      CartId:
         in: header
         name: CartId
         required: false

         schema:
            type: string
         description: Guest cart ID for cart merge
      MyStoreId:
         in: header
         name: MyStoreId
         required: false

         schema:
            type: string
         description: Store identifier (e.g., location code)
      MyPostalCode:
         in: header
         name: MyPostalCode
         required: false

         schema:
            type: string
         description: Customer postal code for personalization
         
   examples:
   
      UnauthorizedErrorExample:
         value:
            error_code: UNAUTHORIZED
            message: Token missing or expired.
            type: AuthenticationError
   
      ForbiddenErrorExample:
         value:
            error_code: FORBIDDEN
            message: You do not have permission to access this resource.
            type: AuthorizationError
      InternalServerErrorExample:
        value:
           error_code: INTERNAL_SERVER_ERROR
           message: Service unavailable please try after some time
           type: General
      UserFormValidationFailedGeneralExample:
        value:
          error_code: USER_002_VALIDATION_FAILED
          message: Submitted data failed validation (e.g., missing or invalid fields)
          type: ValidationError
      EmailMissingExample:
        value:
          error_code: USER_005_MISSING_EMAIL
          message: Email must not be empty .
          type: ValidationError
      EmailValidationFailedExample:
        value:
          error_code: USER_006_INVALID_EMAIL
          message: Email format is invalid.
          type: ValidationError
      PasswordMissingExample:
        value:
          error_code: USER_007_MISSING_PASSWORD
          message: Password must not be empty
          type: ValidationError
      PasswordValidationFailedExample:
        value:
          error_code: USER_008_INVALID_PASSWORD
          message: |
            Password must meet the required complexity: minimum 8 characters,
            including at least one uppercase letter, one number, and one special character.
          type: ValidationError
      EmailNotFoundExample:
        value:
          error_code: USER_009_EMAIL_NOT_FOUND
          message: No user found with the given email address
          type: ValidationError
     
      AuthenticationErrorExample:     
        value:
          error_code: USER_012_INVALID_CREDENTIALS
          message: Email or password is incorrect
          type: AuthenticationError
      AuthorizationErrorExample: 
        value:
           error_code: FORBIDDEN
           message: You do not have permission to access this resource.
           type: AuthorizationError          
          
      InvalidTokenExample:
        value:
          error_code: USER_010_INVALID_TOKEN
          message: Token is invalid or expired.
          type: ValidationError